<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.bet</groupId>
	<artifactId>betfun-news-server</artifactId>
	<version>3.0.0</version>
    <modules>
        <module>admin-console</module>
		<module>admin-es</module>
		<module>admin-commons</module>
		<module>admin-mq</module>
        <module>admin-hunter</module>
    </modules>
    <packaging>pom</packaging>
	<description>bet information platform</description>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
	</parent>


	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

	</dependencies>
<!--	<properties>-->
<!--	&lt;!&ndash;wagon plugin 配置&ndash;&gt;-->
<!--	<service-path>/work/bet</service-path>-->
<!--	<pack-name>${project.artifactId}-${project.version}.jar</pack-name>-->
<!--	<remote-addr>192.168.1.10:22</remote-addr>-->
<!--	<remote-username>root</remote-username>-->
<!--	<remote-passwd>123456</remote-passwd>-->
<!--	</properties>-->

<!--	<build>-->
<!--		<finalName>${project.artifactId}</finalName>-->
<!--		<extensions>-->
<!--			<extension>-->
<!--				<groupId>org.apache.maven.wagon</groupId>-->
<!--				<artifactId>wagon-ssh</artifactId>-->
<!--				<version>2.8</version>-->
<!--			</extension>-->
<!--		</extensions>-->
<!--		<plugins>-->
<!--			<plugin>-->
<!--				<groupId>org.springframework.boot</groupId>-->
<!--				<artifactId>spring-boot-maven-plugin</artifactId>-->
<!--				<configuration>-->
<!--					<fork>true</fork>-->
<!--				</configuration>-->
<!--			</plugin>-->
<!--			&lt;!&ndash; 跳过单元测试 &ndash;&gt;-->
<!--			<plugin>-->
<!--				<groupId>org.apache.maven.plugins</groupId>-->
<!--				<artifactId>maven-surefire-plugin</artifactId>-->
<!--				<configuration>-->
<!--					<skipTests>true</skipTests>-->
<!--				</configuration>-->
<!--			</plugin>-->
<!--			<plugin>-->
<!--				<groupId>org.codehaus.mojo</groupId>-->
<!--				<artifactId>wagon-maven-plugin</artifactId>-->
<!--				<version>1.0</version>-->
<!--				<configuration>-->
<!--					<fromFile>target/${pack-name}</fromFile>-->
<!--					<url><![CDATA[scp://${remote-username}:${remote-passwd}@${remote-addr}${service-path}]]></url>-->
<!--					<commands>-->
<!--						&lt;!&ndash; Kill Old Process &ndash;&gt;-->
<!--						<command>kill -9 `ps -ef |grep ${project.artifactId}.jar|grep -v "grep" |awk '{print $2}'`</command>-->
<!--						&lt;!&ndash; Restart jar package，write result into renren.log &ndash;&gt;-->
<!--						<command><![CDATA[nohup java -jar ${service-path}/${pack-name} &#45;&#45;spring.profiles.active=test > ${service-path}/information.log 2>&1 & ]]></command>-->
<!--						<command><![CDATA[netstat -nptl]]></command>-->
<!--						<command><![CDATA[ps -ef | grep java | grep -v grep]]></command>-->
<!--					</commands>-->
<!--					&lt;!&ndash; 运行命令 mvn clean package wagon:upload-single wagon:sshexec&ndash;&gt;-->
<!--					<displayCommandOutputs>true</displayCommandOutputs>-->
<!--				</configuration>-->
<!--			</plugin>-->

<!--			<plugin>-->
<!--				<groupId>com.spotify</groupId>-->
<!--				<artifactId>docker-maven-plugin</artifactId>-->
<!--				<version>0.4.14</version>-->
<!--				&lt;!&ndash;<executions>&ndash;&gt;-->
<!--					&lt;!&ndash;<execution>&ndash;&gt;-->
<!--						&lt;!&ndash;<phase>package</phase>&ndash;&gt;-->
<!--						&lt;!&ndash;<goals>&ndash;&gt;-->
<!--							&lt;!&ndash;<goal>build</goal>&ndash;&gt;-->
<!--						&lt;!&ndash;</goals>&ndash;&gt;-->
<!--					&lt;!&ndash;</execution>&ndash;&gt;-->
<!--				&lt;!&ndash;</executions>&ndash;&gt;-->
<!--				<configuration>-->
<!--					<imageName>bet/fast</imageName>-->
<!--					<dockerDirectory>${project.basedir}</dockerDirectory>-->
<!--					<resources>-->
<!--						<resource>-->
<!--							<targetPath>/</targetPath>-->
<!--							<directory>${project.build.directory}</directory>-->
<!--							<include>${project.build.finalName}.jar</include>-->
<!--						</resource>-->
<!--					</resources>-->
<!--				</configuration>-->
<!--				&lt;!&ndash; 运行命令 mvn clean package docker:build 打包并生成docker镜像 &ndash;&gt;-->
<!--			</plugin>-->
<!--		</plugins>-->
<!--	</build>-->

</project>
